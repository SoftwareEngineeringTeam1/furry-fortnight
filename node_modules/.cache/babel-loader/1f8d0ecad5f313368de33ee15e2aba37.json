{"remainingRequest":"/Users/AJApple/Downloads/fiu-map/node_modules/babel-loader/lib/index.js!/Users/AJApple/Downloads/fiu-map/node_modules/eslint-loader/index.js??ref--13-0!/Users/AJApple/Downloads/fiu-map/src/router.js","dependencies":[{"path":"/Users/AJApple/Downloads/fiu-map/src/router.js","mtime":1574901668000},{"path":"/Users/AJApple/Downloads/fiu-map/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/AJApple/Downloads/fiu-map/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/AJApple/Downloads/fiu-map/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.array.includes\";\nimport Vue from \"vue\";\nimport Router from \"vue-router\";\nimport Home from \"./views/Home/Home.vue\";\nVue.use(Router); // export default new Router({\n\nvar router = new Router({\n  mode: 'history',\n  routes: [{\n    path: \"/\",\n    name: \"Home\",\n    component: Home\n  }, {\n    path: \"/about\",\n    name: \"about\",\n    // route level code-splitting\n    // this generates a separate chunk (about.[hash].js) for this route\n    // which is lazy-loaded when the route is visited.\n    component: function component() {\n      return import(\n      /* webpackChunkName: \"about\" */\n      \"./components/About/About.vue\");\n    }\n  }, {\n    path: \"/EventPage\",\n    name: \"EventPage\",\n    component: function component() {\n      return import(\"./views/EventPage/EventPage.vue\");\n    }\n  }]\n});\nrouter.beforeEach(function (to, from, next) {\n  // redirect to login page if not logged in and trying to access a restricted page\n  var loggedOutSetOfPages = ['/', '/about'];\n  var loginRequired = !loggedOutSetOfPages.includes(to.path);\n  var loggedIn = localStorage.getItem('token');\n\n  if (loginRequired && !loggedIn) {\n    return next('/');\n  }\n\n  next();\n});\nexport default router;",{"version":3,"sources":["/Users/AJApple/Downloads/fiu-map/src/router.js"],"names":["Vue","Router","Home","use","router","mode","routes","path","name","component","beforeEach","to","from","next","loggedOutSetOfPages","loginRequired","includes","loggedIn","localStorage","getItem"],"mappings":";AAAA,OAAOA,GAAP,MAAgB,KAAhB;AACA,OAAOC,MAAP,MAAmB,YAAnB;AACA,OAAOC,IAAP;AAEAF,GAAG,CAACG,GAAJ,CAAQF,MAAR,E,CAEA;;AACA,IAAMG,MAAM,GAAG,IAAIH,MAAJ,CAAW;AACxBI,EAAAA,IAAI,EAAE,SADkB;AAExBC,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,IAAI,EAAE,GADR;AAEEC,IAAAA,IAAI,EAAE,MAFR;AAGEC,IAAAA,SAAS,EAAEP;AAHb,GADM,EAMN;AACEK,IAAAA,IAAI,EAAE,QADR;AAEEC,IAAAA,IAAI,EAAE,OAFR;AAGE;AACA;AACA;AACAC,IAAAA,SAAS,EAAE;AAAA,aACT;AAAO;AAAP,qCADS;AAAA;AANb,GANM,EAeN;AACEF,IAAAA,IAAI,EAAE,YADR;AAEEC,IAAAA,IAAI,EAAE,WAFR;AAGEC,IAAAA,SAAS,EAAE;AAAA,aAAM,yCAAN;AAAA;AAHb,GAfM;AAFgB,CAAX,CAAf;AAwBAL,MAAM,CAACM,UAAP,CAAkB,UAACC,EAAD,EAAKC,IAAL,EAAWC,IAAX,EAAoB;AACpC;AACA,MAAMC,mBAAmB,GAAG,CAAC,GAAD,EAAM,QAAN,CAA5B;AACA,MAAMC,aAAa,GAAG,CAACD,mBAAmB,CAACE,QAApB,CAA6BL,EAAE,CAACJ,IAAhC,CAAvB;AACA,MAAMU,QAAQ,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAjB;;AAEA,MAAIJ,aAAa,IAAI,CAACE,QAAtB,EAAgC;AAC9B,WAAOJ,IAAI,CAAC,GAAD,CAAX;AACD;;AAEDA,EAAAA,IAAI;AACL,CAXD;AAaA,eAAeT,MAAf","sourcesContent":["import Vue from \"vue\";\nimport Router from \"vue-router\";\nimport Home from \"./views/Home/Home.vue\";\n\nVue.use(Router);\n\n// export default new Router({\nconst router = new Router({\n  mode: 'history',\n  routes: [\n    {\n      path: \"/\",\n      name: \"Home\",\n      component: Home\n    },\n    {\n      path: \"/about\",\n      name: \"about\",\n      // route level code-splitting\n      // this generates a separate chunk (about.[hash].js) for this route\n      // which is lazy-loaded when the route is visited.\n      component: () =>\n        import(/* webpackChunkName: \"about\" */ \"./components/About/About.vue\")\n    },\n    {\n      path: \"/EventPage\",\n      name: \"EventPage\",\n      component: () => import(\"./views/EventPage/EventPage.vue\")\n    }\n  ]\n});\nrouter.beforeEach((to, from, next) => {\n  // redirect to login page if not logged in and trying to access a restricted page\n  const loggedOutSetOfPages = ['/', '/about'];\n  const loginRequired = !loggedOutSetOfPages.includes(to.path);\n  const loggedIn = localStorage.getItem('token');\n  \n  if (loginRequired && !loggedIn) {\n    return next('/');\n  } \n\n  next();\n})\n\nexport default router;"]}]}